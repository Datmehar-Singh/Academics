*****************************************************************************
                               Reflection
                             Workshop - #8
Full Name  : Datmehar Singh
Student ID#: 108011214
Email      : datmehar-singh@myseneca.ca
Section    : NHH

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************

Q1. Structure data types can demand a lot of memory (for example the "ReportData" structure). Without digging into advanced memory management (for example padding), how many bytes of memory would the "ReportData" structure minimally require? How could we improve the passing of this information to functions? Use the function "displayReportData" from this workshop in your explanation.
A1. A variable of struct ReportData can occupy the size that is occupied by all its included variable combined. Is is as followed:


    int skuNumber; ------------>int takes 2 or 4 bytes depending on compiler
    double price;-------------->double takes 8 bytes
    int calPerServe;----------->2 or 4 bytes
    double weightInLbs;-------->8 bytes
    double weightInKgs;-------->8 bytes
    int weightInGrams;--------->2 or 4 bytes
    double totalServings;------>8 bytes
    double costPerServing;----->8 bytes
    double calCostPerServe;---->8 bytes

As most of the compiler occupy 4 bytes for int data type so an object of ReportData occupies 4+8+4+8+8+4+8+8+8 = 60 bytes.

We can improve the passing of function by making the use of pointer to the data we want to access. For securing the data from getting altered of mutated then we can use the keywords like const which will ensure the former. This can be illustrated in part 2 by the following changes:

Old:
void displayReportData(const struct ReportData data, const int isCheapest)
{
	printf("%07d %10.2lf %10.1lf %10.4lf %9d %8d %8.1lf %7.2lf %7.5lf", data.skuNumber, data.price, data.weightInLbs, data.weightInKgs, data.weightInGrams, data.calPerServe, data.totalServings, data.costPerServing, data.calCostPerServe);

	if (isCheapest)
		printf("***");

	printf("\n");
}

Modified:
void displayReportData(struct ReportData* const data, const int isCheapest)
{
	printf("%07d %10.2lf %10.1lf %10.4lf %9d %8d %8.1lf %7.2lf %7.5lf", data->skuNumber, data->price, data->weightInLbs, data->weightInKgs, data->weightInGrams, data->calPerServe, data->totalServings, data->costPerServing, data->calCostPerServe);

	if (isCheapest)
		printf("***");

	printf("\n");
}

This would take lesser time as a pointer is of a constant size which is mostly of 8 bytes and will take lesser size and is more efficient unless needed otherwise.

______________________________________________________________________


Q2. The CatFoodInfo structure and the ReportData structure contain common members. How could the "ReportData" structure be improved? Show the new and improved "ReportData" structure with your changes, then show how you would modify your code in the function "displayReportData". Specifically, show how you would need to modify the printf statement that displays the data.
A2. Since these structures contain common member so we can include the object of CatFoodInfo in the structure body of ReportData which will be like:


struct CatFoodInfo
{
    int skuNumber;
    double price;
    int calPerServing;
    double weightInLbs;
};

struct ReportData{

    struct CatFoodInfo product;

    double weightInKgs;
    int weightInGrams;
    double totalServings;
    double costPerServing;
    double calCostPerServe;

};

void displayReportData(struct ReportData* const data, const int isCheapest)
{
	printf("%07d %10.2lf %10.1lf %10.4lf %9d %8d %8.1lf %7.2lf %7.5lf", data->product.skuNumber, data->product.price, data->product.weightInLbs, data->weightInKgs, data->weightInGrams, data->product.calPerServing, data->totalServings, data->costPerServing, data->calCostPerServe);

	if (isCheapest)
		printf("***");

	printf("\n");
}

