*****************************************************************************
                               Reflection
                             Workshop – A1MS1
Full Name  : Datmehar Singh
Student ID#: 108011214
Email      : datmehar-singh@myseneca.ca
Section    : NHH

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*******************************************************************************

Q1. From the core functions library, what function was the most challenging to define and clearly describe the challenge(s) including how you managed to overcome them in the context of the methods used in preparing your logic, debugging, and testing. 
A1. Although almost every function is easy to understand and was based on the rudimentary topics but the out of those, the most challenging one was the inputCString(param1,param2,param3) 
This was difficult because we were not given the exact size of the array that could be input so the pointer passed as param1 was to be altered. Another thing which made it difficult was the different error statements that had to be displayed in case the string did not fall under the range or the exact number. The hierarchy of if…else if’s was a bit confusing.
I, first of all, categorised the length of the string whether the upper bound and lower bound are same or not and then worked on individual cases. In testing, I tested my solution for all the extreme cases like making the string length inclusive of the range and much more.

SNIPPET:

if(lower_bound==upper_bound && i!=lower_bound)
	    printf("ERROR: String length must be exactly %d chars: ",lower_bound);
else if(lower_bound==upper_bound && i==lower_bound) flag=0;
else if(lower_bound!=upper_bound  ){
        if(i>upper_bound)
            printf("ERROR: String length must be no more than %d chars: ",    upper_bound);
        else if(i<lower_bound && lower_bound!=upper_bound)
            printf("ERROR: String length must be between %d and %d chars: ",    lower_bound,    upper_bound);
	else
	    flag=0;
Q2. It is good practice to initialize variables to a "safe empty state". With respect to variable initialization, what is the difference between assigning 0 and NULL? When do you use one over the other and why? 

Ans. Yes, it very important to initialise variable to a safe empty state especially the pointers as it may point to a file which contains the data for the operating system and may affect the working of the system. 

When we assign 0 to a variable then we are storing the address of a definite int object created in the heap memory.
For instance, when we write the following command 
 int a=0; 
then we are creating a separate memory location in the heap memory which has 0 in it and we are storing the address of that 0 to the variable a.
But on the contrary when we assign NULL to a pointer then we are not letting the pointer to arbitrarily point to any random location and make it point to a NULL location which does not harm the operating system and its files. Also, it is easier to catch a null pointer rather than a pointer which points to some arbitrary location.


Q3. Your friend (also a beginner programmer) is having difficulty understanding how to manage the "standard input buffer" (particularly when there is residual data). Your friend has read all the course notes, Googled the topic, followed along with course lectures about this topic, but is still struggling with this concept. Describe exactly how you would attempt to help your friend understand this topic? 
Ans?Standard input buffer is nothing but a partition in the memory where all the inputs are stored before they are sent for processing. But this is just another definition which can be found on the internet or a paraphrased form of it. 
To give a clear glimpse of it, it can be understood as an intermediate stage between a three-state system where the input is stored for passing it further to the CPU.
The flowchart of it goes as follows:


The user gives input  --------------?The system stores it for  further request for input-----?passes the value to CPU for processing



