/*
*****************************************************************************
                        Assignment 1 - Milestone 2 (reflection)
Full Name  : Datmehar Singh
Student ID#: 108011214
Email      : datmehar-singh@myseneca.ca
Section    : NHH

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
*/
Q1. What factors must you consider when naming a module or library? Why do you think it is a suggested best practice to identify a library's header and source code files using the same name? Give an example from this assignment to support your argument. 
A1. The factors which we must consider while naming a module or library is giving it a short and crisp name which precisely defines what the part is it maintaining and sometimes what functionality is it providing for a certain part. It has multifarious benefits as not only it helps the programmer to manage the code with single file, but it also helps to increase the usage of the functions as another programmer who must use the code will not have to go through whole of the code including the definitions of all the functions and get a gist from only the .h file. Also, it promotes abstraction to an extent. To cite an example from the assignment, I can pick the file clinic.h and clinic.c, It is easy to maintain them as bith of them have the same name which makes me aware of what are the data structures and functions that can be used in the source code.
______________________________________________________________________________

Q2. So far, you have created and are maintaining two modules in the development of this application. Why do we have these two modules and explain why these aren't combined into a single module? 
A2. We have used two modules because merging them into one would clutter the stuff up and will drastically decrease the readability of the code. Also, as c is highly modular language and not making different modules would defy its whole purpose. In this application, I have created two modules name core and clinic. The core contains the functions which are further used to perform some basic redundant tasks like taking input and validating them for different conditions whereas the clinic module has the functions and data structures which are used in the clinic functions like the records of the patient as well as their contact information.
_______________________________________________________________________________

Q3. Modules are typically split into a header file and an implementation file. What purpose and benefit is there to this division? Refer to the module(s) in this application in your explanation. 
A3. There are certain benefits of splitting the file into a c file and a header file as it will help the programmer to include the functionalities of one program to the other simply by including the header file in the second one. Another benefit that is it was created for was because of problem in accessing the scope for the functions.
For example, once there arose a situation where I had to assign a pointer to some value but couldn’t because the function which was supposed to do that was declared after the former one.
Void fun1(){
Fun2();
}
Void fun2(){
Fun1();
}
Here the function fun1 would not be able to run as it doesn’t have access to fun2 which is being called in the body of that function.
